[tool.poetry]
name = "Mesh-Client"
version = "0.0.0"
description = "Client for NHS England's MESH messaging system"
repository = "https://github.com/NHSDigital/mesh-client"
authors = ["spinecore"]
license = "MIT"
packages = [
    { include = "mesh_client" },
]
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

# including this would turn on pyproject.toml for setuptools and fail validation
#[tool.setuptools.package-data]
#"mesh_client" = [
#    "py.typed",
#    "*.pem"
#]

[tool.poetry.dependencies]
# core dependencies
python = ">=3.7"
requests = ">=2.26.0"
urllib3 = ">=1.25.4"


[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
mypy = "^1.4.1"
types-six = "^1.16.21.8"
types-requests = "^2.31.0.1"
types-mock = "^5.0.0.7"
mock = "^5.0.2"
build = "^1.0.3"
toml = "^0.10.2"
tox = "^4.6.3"
types-pkg-resources = "^0.1.3"
coverage = "^7.2.7"
pytest = "^7.4.0"
importlib-metadata = {version = ">=4.11.4", python = "<3.12"}
pytest-httpserver = {version = "^1.0.8", python = ">=3.8,<4.0"}
ruff = "^0.1.5"
boto3 = "^1.33.7"

[tool.poetry.group.local.dependencies]
ipython = {version = "^8.14.0", python = ">=3.9,<4.0"}


[tool.ruff]
select = [
    # See https://beta.ruff.rs/docs/rules/ for a full list
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "Q", # flake8-quotes
    "YTT", # flake8-2020
    "RSE", # flake8-raise
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "EXE", # flake8-executable
    "A", # flake8-builtins
    "UP",  # pyupgrade
    "PT", # flake8-pytest-style
    "PERF", # Perflint #
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
]
src = ["."]
ignore = [
    "PT004"
]
exclude = [
    ".git",
    ".venv",
]
unfixable = ["SIM112"]
line-length = 120
target-version = "py37"


[tool.pytest.ini_options]
#asyncio_mode = "auto"
python_classes = "NoTestClassesPlease"
python_files = "*_testz.py test_*.py *_tests.py"
norecursedirs = ".git .venv .eggs build dist terraform features"

[tool.black]
line-length = 120
target-version = ['py37']
include = '\.pyi?$'
#extend-exclude = '''
#/(
#  # The following are specific to Black, you probably don't want those.
#  | blib2to3
#  | tests/data
#  | profiling
#)/
#'''



[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py37,py38,py39,py310,py311

[gh-actions]
python =
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311

[testenv:.pkg]
set_env =
    RELEASE_VERSION=1.2.3

[testenv]
wheel_build_env = .pkg
use_develop = true
package = wheel
deps =
    requests>=2.26.0
    mock
    pytest
    pytest-httpserver
commands =
    python -m pytest

"""

[tool.coverage.run]
branch = true
omit = [
    "features/*",
    ".venv/lib/*",
    "build/*",
    "**/build/*",
    "dist/*",
    "**/dist/*",
    "src/shared/aws.py",
    "scripts/*",
    "mesh_client/types.py"
]
source = [
    "."
]


[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    "pragma: no cover",
    "from .*",
    "import .*"
]
omit = [
    "*/conftest.py",
    "*_tests.py",
    "*/test_helpers*",
    "*/test_mailbox_provider.py"
]
sort = "-cover"
ignore_errors = true
precision = 2
fail_under = 78
show_missing = true

[tool.coverage.xml]
output = "reports/coverage.xml"

[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
check_untyped_defs = true


[tool.poetry-dynamic-versioning]
enable = true
metadata = false
vcs = "git"
style = "pep440"
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base), stage, revision, dev=timestamp) }}
    {%- endif -%}
"""
pattern = "(?x)^((?P<epoch>\\d+)!)?(?P<base>\\d+(\\.\\d+)*)([-._]?((?P<stage>[a-zA-Z]+)[-._]?(?P<revision>\\d+)?))?(\\+(?P<tagged_metadata>.+))?$"


[build-system]
requires = ["setuptools>=42", "toml", "wheel", "setuptools_scm[toml]>=3.4"]
build-backend = "setuptools.build_meta"
